from chunkypipes.components import *
import sys
import os
import pandas
import datetime
from fpdf import FPDF
sys.path.append(".")
import generate_report
import generate_illumina_snp_stats

class Pipeline(BasePipeline):
		
	def dependencies(self):
		# assuming user as pip installed
		return ['pandas', 'matplotlib', 'fpdf', 'Pillow']

	def description(self):
		return 'Pipeline to perform sample QC (call rate, HWE, Mendelian Error)'

	def configure(self):
		return {
			'plink':{
				'path': 'Full path to PLINK executable (must be version >=1.9):'
			}
		}

	def add_pipeline_args(self, parser):
		parser.add_argument('-sampleTable', required=True, help="[REQUIRED] Full path to text file of Illumina sample table metrics tab-delimited")
		parser.add_argument('-snpTable', required=True, help="[REQUIRED] Full path to text file of Illumina SNP table tab-delimited")
		parser.add_argument('--projectName', default='test', help="Name of project or owner of project")
		#parser.add_argument('-inputPLINK', required=True, help="Full path to PLINK file to be used in analysis corresponding MAP files or .bim,.fam should be located in same directory (ends in .PED or .BED)")
		parser.add_argument('--callrate', default=0.991, help="[default:0.991] minimum call rate to be included in sample set")
		parser.add_argument('--snp_callrate', default=0.97, help='[default:0.97] minimum call rate for SNP to be included in autosomal SNP set (anything below this value will be removed')
		parser.add_argument('--clusterSep', default=0.30, help='[default:0.30] mimimum allowable cluster separation value in order for SNP to be retained (anything equal to or below this value is removed')
		parser.add_argument('--AATmean', default=0.30, help='[default:0.30] maximum allowable AA T mean threshold in order for SNP to be retained (anything above this value is removed')
		parser.add_argument('--AATdev', default=0.06, help='[default:0.06] maximum allowable AA T dev threshold in order for SNP to be retained (anything above this value is removed)')
		parser.add_argument('--BBTmean', default=0.70, help='[default:0.70] minimum allowable BB T mean threshold in order for SNP to be retained (anything below this value is removed)')
		parser.add_argument('--BBTdev', default=0.06, help='[default:0.06] maximum allowable BB T dev threshold in order for SNP to be retained (anything above this value is removed)')
		parser.add_argument('--AARmean', default=0.20, help='[default:0.20] minimum allowable AA R mean threshold in order for SNP to be retained (anything equal to or below this value is removed)')
		parser.add_argument('--ABRmean', default=0.20, help='[default:0.20] minimum allowable AB R mean threshold in order for SNP to be retained (anything equal to or below this value is removed)')
		parser.add_argument('--BBRmean', default=0.20, help='[default:0.20] minimum allowable BB R mean threshold in order for SNP to be retained (anything equal to or below this value is removed)')

	@staticmethod
	def check_input_format(inputPlinkfile):
		if inputPlinkfile[-4:].lower() == '.ped':
			print "Input .ped, converting to binary"
			plink_general.run(
				Parameter('--file', inputPlinkfile[:-4]),
				Parameter('--make-bed'),
				Parameter('--out', inputPlinkFile[:-4])
				)

		elif inputPlinkfile[-4:].lower() == '.bed':
			print "Input seems to follow bed format"
		
		else:
			sys.exit("Error!! Input not recognized, please input .ped or .bed PLINK file" )
	
	
	def run_pipeline(self, pipeline_args, pipeline_config):
		# create PDF object for output
		pdf = FPDF()
		pdf.add_page()
		pdf.set_font('Arial', 'B', 30)
		pdf.cell(0, 30, "QC Report Generated by TICR", 0, 1, 'C')
		pdf.set_font('Arial', 'B', 20)
		pdf.cell(0, 35, 'Univerisity of Colorado', 0, 1, 'C')
		pdf.set_font('Arial', 'B', 16)
		pdf.cell(0, 10, 'Project:  '+ str(pipeline_args['projectName']), 0, 1, 'C')
		pdf.cell(0, 10, 'Date:  '+str(datetime.date.today()), 0, 1, 'C')

		# write thresholds and parameters to PDF file
		generate_report.thresholds_and_parameters(pdf=pdf, params=pipeline_args)
		# a list of files to remove once pipeline in finished running, clean up purposes
		stage_for_deletion = []
		
		
		# Illumina Threshold Filters, generate stats and create list of samples/snps to remove
		# no actual removal happens here, just list removal and records statistics in PDF
		remove_samples = generate_report.illumina_sample_overview(inputFile=pipeline_args['sampleTable'], pdf=pdf, callrate=pipeline_args['callrate'])
		generate_illumina_snp_stats.illumina_snp_overview(inputFile=pipeline_args['snpTable'], pdf=pdf, clusterSep=pipeline_args['clusterSep'], aatmean=pipeline_args['AATmean'],
					aatdev=pipeline_args['AATdev'], bbtmean=pipeline_args['BBTmean'], bbtdev=pipeline_args['BBTdev'], aarmean=pipeline_args['AARmean'], abrmean=pipeline_args['ABRmean'],
					bbrmean=pipeline_args['BBRmean'], callrate=pipeline_args['snp_callrate'])


		pdf.output(pipeline_args['projectName']+'.pdf', 'F')

		# TO DO:
		# use plink --remove to remove the samples that fail QC in remove_sample file

		
		plink_general = Software('plink', pipeline_args['plink']['path'])
		plink_freq = Software('plink', pipeline_config['plink']['path'], '--freq')
		

		# checks file format of PLINK file, if not in binary converts to binary
		#self.check_input_format(
		#	inputPlinkfile=add_pipeline_args['inputPLINK']
		#	)


















		# at very end call generate_report
