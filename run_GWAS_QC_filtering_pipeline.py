from chunkypipes.components import *
import sys
import os
import pandas
import datetime
from fpdf import FPDF
sys.path.append(".")
import generate_report

class Pipeline(BasePipeline):
		
	def dependencies(self):
		# assuming user as pip installed
		return ['pandas', 'matplotlib', 'fpdf', 'Pillow']

	def description(self):
		return 'Pipeline to perform sample QC (call rate, HWE, Mendelian Error)'

	def configure(self):
		return {
			'plink':{
				'path': 'Full path to PLINK executable (must be version >=1.9):'
			}
		}

	def add_pipeline_args(self, parser):
		parser.add_argument('-sampleTable', required=True, help="Full path to text file of Illumina sample table metrics")
		parser.add_argument('--projectName', default='test', help="Name of project or owner of project")
		#parser.add_argument('-snpTable', required=True, help="Full path to text file of Illumina SNP table")
		#parser.add_argument('-inputPLINK', required=True, help="Full path to PLINK file to be used in analysis (post GenomeStudio cleanup)")
		parser.add_argument('--callrate', default=0.991, help="minimum call rate to be included in sample set")
	
	
	@staticmethod
	def check_input_format(inputPlinkfile):
		pass;
	
	
	def run_pipeline(self, pipeline_args, pipeline_config):
		# create PDF object for output
		pdf = FPDF()
		pdf.add_page()
		pdf.set_font('Arial', 'B', 30)
		pdf.cell(0, 30, "QC Report Generated by TICR", 0, 1, 'C')
		pdf.set_font('Arial', 'B', 20)
		pdf.cell(0, 35, 'Univerisity of Colorado', 0, 1, 'C')
		pdf.set_font('Arial', 'B', 16)
		pdf.cell(0, 10, 'Project:  '+ str(pipeline_args['projectName']), 0, 1, 'C')
		pdf.cell(0, 10, 'Date:  '+str(datetime.date.today()), 0, 1, 'C')

		# write thresholds and parameters to PDF file
		generate_report.thresholds_and_parameters(callrate=pipeline_args['callrate'])
		# a list of files to remove once pipeline in finished running, clean up purposes
		stage_for_deletion = []
		
		
		# Illumina Threshold Filters, generate stats and create list of samples/snps to remove
		# no actual removal happens here, just list removal and records statistics in PDF
		remove_samples = generate_report.illumina_sample_overview(inputFile=pipeline_args['sampleTable'], pdf=pdf, project=pipeline_args['projectName'],
			callrate=pipeline_args['callrate'])
		pdf.output(pipeline_args['projectName']+'.pdf', 'F')
		#remove_snps = generate_report.illumina_snp_overview(inputFile=add_pipeline_args['snpTable'])


		# TO DO:
		# use plink --remove to remove the samples that fail QC in remove_sample file

		# checks file format of PLINK file, if not in binary converts to binary
		#self.check_input_format(
		#	inputPlinkfile=add_pipeline_args['inputPLINK']
		#	)

		#plink_freq = Software('plink', pipeline_config['plink']['path'] +' --freq')




















		# at very end call generate_report
